/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package io.github.bhuwanupadhyay.schemas;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class PaymentReceived extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4664683327257851056L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"PaymentReceived\",\"namespace\":\"io.github.bhuwanupadhyay.schemas\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"paymentId\",\"type\":\"string\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentReceived> ENCODER =
      new BinaryMessageEncoder<PaymentReceived>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentReceived> DECODER =
      new BinaryMessageDecoder<PaymentReceived>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentReceived> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentReceived> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentReceived> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentReceived>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentReceived to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentReceived from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentReceived instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static PaymentReceived fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence orderId;
  @Deprecated public java.lang.CharSequence paymentId;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public PaymentReceived() {}

  /**
   * All-args constructor.
   *
   * @param orderId The new value for orderId
   * @param paymentId The new value for paymentId
   */
  public PaymentReceived(java.lang.CharSequence orderId, java.lang.CharSequence paymentId) {
    this.orderId = orderId;
    this.paymentId = paymentId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return orderId;
      case 1:
        return paymentId;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        orderId = (java.lang.CharSequence) value$;
        break;
      case 1:
        paymentId = (java.lang.CharSequence) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   *
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   *
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'paymentId' field.
   *
   * @return The value of the 'paymentId' field.
   */
  public java.lang.CharSequence getPaymentId() {
    return paymentId;
  }

  /**
   * Sets the value of the 'paymentId' field.
   *
   * @param value the value to set.
   */
  public void setPaymentId(java.lang.CharSequence value) {
    this.paymentId = value;
  }

  /**
   * Creates a new PaymentReceived RecordBuilder.
   *
   * @return A new PaymentReceived RecordBuilder
   */
  public static io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder newBuilder() {
    return new io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder();
  }

  /**
   * Creates a new PaymentReceived RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new PaymentReceived RecordBuilder
   */
  public static io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder newBuilder(
      io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder other) {
    if (other == null) {
      return new io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder();
    } else {
      return new io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder(other);
    }
  }

  /**
   * Creates a new PaymentReceived RecordBuilder by copying an existing PaymentReceived instance.
   *
   * @param other The existing instance to copy.
   * @return A new PaymentReceived RecordBuilder
   */
  public static io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder newBuilder(
      io.github.bhuwanupadhyay.schemas.PaymentReceived other) {
    if (other == null) {
      return new io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder();
    } else {
      return new io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder(other);
    }
  }

  /** RecordBuilder for PaymentReceived instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentReceived>
      implements org.apache.avro.data.RecordBuilder<PaymentReceived> {

    private java.lang.CharSequence orderId;
    private java.lang.CharSequence paymentId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[1].schema(), other.paymentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentReceived instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(io.github.bhuwanupadhyay.schemas.PaymentReceived other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[1].schema(), other.paymentId);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'orderId' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }

    /**
     * Sets the value of the 'orderId' field.
     *
     * @param value The value of 'orderId'.
     * @return This builder.
     */
    public io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder setOrderId(
        java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'orderId' field has been set.
     *
     * @return True if the 'orderId' field has been set, false otherwise.
     */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'orderId' field.
     *
     * @return This builder.
     */
    public io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'paymentId' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getPaymentId() {
      return paymentId;
    }

    /**
     * Sets the value of the 'paymentId' field.
     *
     * @param value The value of 'paymentId'.
     * @return This builder.
     */
    public io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder setPaymentId(
        java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.paymentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'paymentId' field has been set.
     *
     * @return True if the 'paymentId' field has been set, false otherwise.
     */
    public boolean hasPaymentId() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'paymentId' field.
     *
     * @return This builder.
     */
    public io.github.bhuwanupadhyay.schemas.PaymentReceived.Builder clearPaymentId() {
      paymentId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentReceived build() {
      try {
        PaymentReceived record = new PaymentReceived();
        record.orderId =
            fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.paymentId =
            fieldSetFlags()[1]
                ? this.paymentId
                : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentReceived> WRITER$ =
      (org.apache.avro.io.DatumWriter<PaymentReceived>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentReceived> READER$ =
      (org.apache.avro.io.DatumReader<PaymentReceived>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.orderId);

    out.writeString(this.paymentId);
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8) this.orderId : null);

      this.paymentId = in.readString(this.paymentId instanceof Utf8 ? (Utf8) this.paymentId : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.orderId = in.readString(this.orderId instanceof Utf8 ? (Utf8) this.orderId : null);
            break;

          case 1:
            this.paymentId =
                in.readString(this.paymentId instanceof Utf8 ? (Utf8) this.paymentId : null);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
